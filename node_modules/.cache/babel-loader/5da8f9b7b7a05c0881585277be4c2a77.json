{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/DataArt/CloudDrive/front/src/components/disk/fileList/file/Popup.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { renameFile } from '../../../../actions/file';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Popup = props => {\n  _s();\n\n  const [newName, setNewName] = useState(props.file.name);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    let modalShow = document.getElementById('renameFileModal' + props.id).style.display;\n\n    if (modalShow === 'block') {\n      setNewName(props.file.name);\n      const input = document.getElementById(`File-Popup-input${props.id}`);\n\n      if (props.file.type === 'dir') {\n        input.focus();\n        modalShow = 'none';\n      } else {\n        const index = input.value.indexOf('.');\n        input.focus();\n        input.setSelectionRange(index, index);\n      }\n    }\n  });\n  const data = {\n    file: props.file,\n    newName\n  };\n\n  function renameFileHandler() {\n    // data.newName = data.newName.replace(/ +/g, ' ').trim();\n    if (data.newName != '') {\n      dispatch(renameFile(data));\n    } else {\n      alert('File can\\'t be empty!');\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal fade\",\n      id: 'renameFileModal' + props.id,\n      tabIndex: \"-1\",\n      role: \"dialog\",\n      \"aria-labelledby\": \"renameFileModalLabel\",\n      \"aria-hidden\": \"true\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-dialog\",\n        role: \"document\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"modal-title\",\n              id: \"renameFileModalLabel\",\n              children: props.file._id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"close\",\n              \"data-dismiss\": \"modal\",\n              \"aria-label\": \"Close\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                \"aria-hidden\": \"true\",\n                children: \"\\xD7\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-body\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"File-Popup-input\",\n              id: 'File-Popup-input' + props.id,\n              value: newName,\n              onChange: e => setNewName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-footer\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-secondary\",\n              \"data-dismiss\": \"modal\",\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-primary\",\n              onClick: () => renameFileHandler(),\n              children: \"Save changes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Popup, \"QDrCXjyJSyqL2bhYPepfKsX79fU=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Popup;\nexport default Popup;\n\nvar _c;\n\n$RefreshReg$(_c, \"Popup\");","map":{"version":3,"sources":["/Users/admin/Desktop/DataArt/CloudDrive/front/src/components/disk/fileList/file/Popup.js"],"names":["React","useState","useEffect","useDispatch","renameFile","Popup","props","newName","setNewName","file","name","dispatch","modalShow","document","getElementById","id","style","display","input","type","focus","index","value","indexOf","setSelectionRange","data","renameFileHandler","alert","_id","e","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { renameFile } from '../../../../actions/file';\n\nconst Popup = (props) => {\n    const [newName, setNewName] = useState(props.file.name);\n    const dispatch = useDispatch();\n    useEffect(() => {\n        let modalShow = document.getElementById('renameFileModal' + props.id).style.display;\n        if(modalShow === 'block') {\n            setNewName(props.file.name);\n            const input = document.getElementById(`File-Popup-input${props.id}`);\n            if(props.file.type === 'dir') {\n                input.focus();\n                modalShow = 'none';\n            } else {\n                const index = input.value.indexOf('.');\n                input.focus();\n                input.setSelectionRange(index, index);\n            }\n        }\n    });\n    const data = {\n        file: props.file,\n        newName\n    }\n    function renameFileHandler() {\n        // data.newName = data.newName.replace(/ +/g, ' ').trim();\n        if(data.newName != '') {\n            dispatch(renameFile(data));\n        } else {\n            alert('File can\\'t be empty!');\n        }\n    }\n    return (\n        <>\n            <div className=\"modal fade\" id={'renameFileModal' + props.id} tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"renameFileModalLabel\" aria-hidden=\"true\">\n                <div className=\"modal-dialog\" role=\"document\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <h5 className=\"modal-title\" id=\"renameFileModalLabel\">{props.file._id}</h5>\n                                <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                </button>\n                        </div>\n                        <div className=\"modal-body\">\n                            <input type='text'\n                                className='File-Popup-input'\n                                id={'File-Popup-input' + props.id}\n                                value={newName}\n                                onChange={(e) => setNewName(e.target.value)}\n                            />\n                        </div>\n                        <div className=\"modal-footer\">\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                            <button\n                            type=\"button\"\n                            className=\"btn btn-primary\"\n                            onClick={() => renameFileHandler()}\n                            >Save changes</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Popup;"]},"metadata":{},"sourceType":"module"}