{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/DataArt/CloudDrive/front/src/components/disk/Disk.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFiles, uploadFile, createDir, uploadFolder } from '../../actions/file';\nimport { setCurrentDir } from '../../reducers/fileReducer';\nimport FileList from './fileList/FileList';\nimport './disk.css';\nimport 'bootstrap';\nimport uploadFileLogo from '../../assets/upload-file.png';\nimport uploadFolderLogo from '../../assets/upload-folder.png';\nimport createFolderLogo from '../../assets/create-folder.png';\nimport Popup from './Popup';\nimport { useParams } from 'react-router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Disk = () => {\n  _s();\n\n  const dispatch = useDispatch(); // let currentDir = window.location.pathname.replace('/', '') === '' ? 'null' : window.location.pathname.replace('/', '');\n\n  currentDir = useSelector(state => state.files.currentDir);\n  const files = useSelector(state => state.files.files);\n  const userId = useSelector(state => state.user.currentUser.userId);\n  useEffect(() => {\n    // const currentDirId = localStorage.getItem('currentDirId') || currentDir;\n    dispatch(getFiles(currentDir));\n    document.addEventListener('scroll', scrollHandler);\n  }, [currentDir]);\n\n  function fileUploadHandler(e) {\n    // currentDir = currentDir === null ? userId : currentDir;\n    const files = [...e.target.files];\n    files.forEach(async file => {\n      let result = await dispatch(uploadFile(currentDir, file));\n\n      if (result === 'fileExist') {\n        console.log('xui');\n        alert('File already exist!');\n      }\n    });\n  }\n\n  async function folderUploadHandler(e) {\n    // currentDir = currentDir === null ? userId : currentDir;\n    const files = e.target.files;\n    console.log(files);\n    const result = await dispatch(uploadFolder(files, currentDir));\n\n    if (result === 'dirExist') {\n      alert('Directory already exist!');\n    } // files.forEach(file => {\n    //     const path = file.webkitRelativePath.split('/');\n    //     const fileName = path.pop();\n    //     let res;\n    //     path.forEach(async folder => {\n    //         res = await dispatch(createDir(currentDir, folder));\n    //     });\n    //     console.log(res);\n    // });\n\n  }\n\n  const scrollHandler = () => {\n    const scroll = document.documentElement.scrollTop;\n    const button = document.getElementById('Disk-create-btn').style;\n\n    if (scroll >= 60) {\n      button.transition = '.0s';\n      button.marginTop = '-60px';\n      button.position = 'fixed';\n      setTimeout(() => {\n        button.transition = '.3s';\n      }, 5);\n    }\n\n    if (scroll <= 60) {\n      button.transition = '.0s';\n      button.marginTop = '0px';\n      button.position = '';\n      setTimeout(() => {\n        button.transition = '.3s';\n      }, 5);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Disk-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Disk-btns\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          \"data-toggle\": \"dropdown\",\n          \"aria-haspopup\": \"true\",\n          \"aria-expanded\": \"false\",\n          className: \"Disk-create-btn\",\n          id: \"Disk-create-btn\",\n          children: \"New\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown-menu\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            \"data-toggle\": \"modal\",\n            className: \"dropdown-item\",\n            \"data-target\": \"#createDirModal\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: createFolderLogo,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, this), \"Folder\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown-divider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"dropdown-item\",\n            htmlFor: \"Disk-upload_file\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: uploadFileLogo,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 29\n            }, this), \"File upload\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"Disk-upload_file\",\n            className: \"Disk-upload_file\",\n            multiple: true,\n            onChange: e => fileUploadHandler(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"dropdown-item\",\n            htmlFor: \"Disk-upload_folder\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: uploadFolderLogo,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 29\n            }, this), \"Folder upload\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"Disk-upload_folder\",\n            className: \"Disk-upload_folder\",\n            webkitdirectory: \"true\",\n            mozdirectory: \"true\",\n            directory: \"true\",\n            onChange: e => folderUploadHandler(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FileList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Popup, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Disk, \"INIU8PY0tcR6OVMHrydGyNC0VfQ=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = Disk;\nexport default Disk;\n\nvar _c;\n\n$RefreshReg$(_c, \"Disk\");","map":{"version":3,"sources":["/Users/admin/Desktop/DataArt/CloudDrive/front/src/components/disk/Disk.js"],"names":["useEffect","useDispatch","useSelector","getFiles","uploadFile","createDir","uploadFolder","setCurrentDir","FileList","uploadFileLogo","uploadFolderLogo","createFolderLogo","Popup","useParams","Disk","dispatch","currentDir","state","files","userId","user","currentUser","document","addEventListener","scrollHandler","fileUploadHandler","e","target","forEach","file","result","console","log","alert","folderUploadHandler","scroll","documentElement","scrollTop","button","getElementById","style","transition","marginTop","position","setTimeout"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFiles, uploadFile, createDir, uploadFolder } from '../../actions/file';\nimport { setCurrentDir } from '../../reducers/fileReducer';\nimport FileList from './fileList/FileList';\nimport './disk.css';\nimport 'bootstrap';\nimport uploadFileLogo from '../../assets/upload-file.png';\nimport uploadFolderLogo from '../../assets/upload-folder.png';\nimport createFolderLogo from '../../assets/create-folder.png';\nimport Popup from './Popup';\nimport { useParams } from 'react-router';\n\nconst Disk = () => {\n    const dispatch = useDispatch();\n    // let currentDir = window.location.pathname.replace('/', '') === '' ? 'null' : window.location.pathname.replace('/', '');\n    currentDir = useSelector(state => state.files.currentDir);\n    const files = useSelector(state => state.files.files);\n    const userId = useSelector(state => state.user.currentUser.userId);\n    useEffect(() => {\n        // const currentDirId = localStorage.getItem('currentDirId') || currentDir;\n        dispatch(getFiles(currentDir));\n        document.addEventListener('scroll', scrollHandler);\n    }, [currentDir]);\n    function fileUploadHandler(e) {\n        // currentDir = currentDir === null ? userId : currentDir;\n        const files = [...e.target.files];\n        files.forEach(async file => {\n            let result = await dispatch(uploadFile(currentDir, file));\n            if(result === 'fileExist') {\n                console.log('xui');\n                alert('File already exist!');\n            }\n        });\n    }\n    async function folderUploadHandler(e) {\n        // currentDir = currentDir === null ? userId : currentDir;\n        const files = e.target.files;\n        console.log(files);\n        const result = await dispatch(uploadFolder(files, currentDir));\n        if(result === 'dirExist') {\n            alert('Directory already exist!');\n        }\n\n        // files.forEach(file => {\n        //     const path = file.webkitRelativePath.split('/');\n        //     const fileName = path.pop();\n        //     let res;\n        //     path.forEach(async folder => {\n        //         res = await dispatch(createDir(currentDir, folder));\n        //     });\n        //     console.log(res);\n        // });\n    }\n    const scrollHandler = () => {\n        const scroll = document.documentElement.scrollTop;\n        const button = document.getElementById('Disk-create-btn').style;\n        if(scroll >= 60) {\n            button.transition = '.0s';\n            button.marginTop = '-60px';\n            button.position = 'fixed';\n            setTimeout(() => {\n                button.transition = '.3s';\n            }, 5);\n        }\n        if(scroll <= 60) {\n            button.transition = '.0s';\n            button.marginTop = '0px';\n            button.position = '';\n            setTimeout(() => {\n                button.transition = '.3s';\n            }, 5);\n        }\n    }\n    return (\n        <div className='Disk-container'>\n            <div className='Disk-btns'>\n                <div className=\"btn-group\">\n                    <button\n                    data-toggle=\"dropdown\"\n                    aria-haspopup=\"true\"\n                    aria-expanded=\"false\"\n                    className='Disk-create-btn'\n                    id='Disk-create-btn'\n                    >New</button>\n                    <div className=\"dropdown-menu\">\n                        <button data-toggle='modal' className=\"dropdown-item\" data-target=\"#createDirModal\">\n                            <img src={createFolderLogo} alt='' />\n                            Folder\n                        </button>\n                        <div className=\"dropdown-divider\"></div>\n                        <label className=\"dropdown-item\" htmlFor='Disk-upload_file'>\n                            <img src={uploadFileLogo} alt='' />\n                            File upload\n                        </label>\n                        <input\n                            type='file'\n                            id='Disk-upload_file'\n                            className='Disk-upload_file'\n                            multiple={true}\n                            onChange={(e) => fileUploadHandler(e)}\n                            />\n                        <label className=\"dropdown-item\" htmlFor='Disk-upload_folder'>\n                            <img src={uploadFolderLogo} alt='' />\n                            Folder upload\n                        </label>\n                        <input\n                            type='file'\n                            id='Disk-upload_folder'\n                            className='Disk-upload_folder'\n                            webkitdirectory='true'\n                            mozdirectory='true'\n                            directory='true'\n                            onChange={(e) => folderUploadHandler(e)}\n                        />\n                    </div>\n                </div>\n            </div>\n            <FileList />\n            <Popup />\n        </div>\n    );\n}\n\nexport default Disk;"]},"metadata":{},"sourceType":"module"}